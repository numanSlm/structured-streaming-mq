name: Build Scala JAR

on:
  push:
    branches:
      - main # Triggers the workflow on pushes to the 'main' branch
  workflow_dispatch: # Allows manual triggering from the GitHub Actions UI

jobs:
  build-jar: # Defines a job named 'build-jar'
    runs-on: ubuntu-latest # Executes the job on the latest Ubuntu runner

    steps:
      - name: Checkout Repository
        # Clones your Git repository onto the runner.
        uses: actions/checkout@v4

      - name: Set up Java JDK 17
        # Installs Java 17, which is required by SBT.
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Recommended OpenJDK distribution
          cache: sbt # Enables caching of SBT dependencies to speed up subsequent builds.

      - name: Install SBT
        # Downloads and sets up the SBT launcher script on the runner.
        # This makes the 'sbt' command available in subsequent steps.
        run: |
          SBT_VERSION="1.10.11" # Specify the SBT launcher version.
          echo "Downloading SBT launcher v${SBT_VERSION}..."
          curl -sL "https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz" -o sbt.tgz
          tar xf sbt.tgz -C /opt/ # Extracts the launcher to /opt/sbt

          # Add SBT's binary directory to the system's PATH.
          # This allows the 'sbt' command to be found.
          echo "/opt/sbt/bin" >> $GITHUB_PATH
          export PATH="/opt/sbt/bin:$PATH"

          echo "Verifying SBT installation..."
          sbt sbtVersion # Runs 'sbt sbtVersion' to confirm it's installed and callable.
          echo "SBT installation complete."

      - name: Debug - List Files and Directories
        # Check its output in the GitHub Actions logs.
        run: |
          echo "Listing contents of repository root and 'resources/' folder:"
          ls -R . # Lists everything recursively from the current directory (repo root)
          echo "--- Contents of resources/ ---"
          # 'ls -l' provides more details like permissions.
          ls -l resources/ # Lists contents of the specific resources folder
          echo "--- End Debug Listing ---"

      - name: Build Scala JAR with SBT Assembly
        # This is the core build step for your Scala project.
        # 'sbt clean assembly' will:
        #   - Clean any previous build artifacts.
        #   - Download the exact SBT version specified in your `project/build.properties`.
        #   - Resolve and download all project dependencies defined in your `build.sbt`.
        #   - Compile your Scala source code (from `src/main/scala/`).
        #   - Use the `sbt-assembly` plugin to package your code into a fat JAR.
        # The JAR will be created in the `resources/` directory as per your `build.sbt`.
        # The output logs of this step will show the path where the JAR is generated.
        run: |
          echo "Starting SBT build process..."
          sbt clean assembly
          echo "SBT build process finished. Check the logs above for the exact JAR output path (e.g., in the 'resources/' directory)."