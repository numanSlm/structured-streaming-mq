name: Build Scala JAR

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy-jar:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: sbt

      # === NEW STEP: Install SBT ===
      - name: Install SBT
        run: |
          # Download the SBT launcher script
          SBT_VERSION="1.10.11"
          curl -sL "https://github.com/sbt/sbt/releases/download/v${SBT_VERSION}/sbt-${SBT_VERSION}.tgz" -o sbt.tgz
          tar xf sbt.tgz -C /opt/
          
          # Add the SBT bin directory to the PATH for current and subsequent steps
          echo "/opt/sbt/bin" >> $GITHUB_PATH
          export PATH="/opt/sbt/bin:$PATH"

          # Verify SBT installation
          sbt sbtVersion
          echo "SBT installation complete."
      # === END NEW STEP ===

      - name: Build Scala JAR with SBT Assembly
        run: sbt clean assembly

      - name: Build Scala JAR with SBT Assembly
        # This is the core build step.
        # 'sbt clean assembly' will:
        #   - Clean previous build artifacts.
        #   - Download the exact SBT version specified in project/build.properties (e.g., 1.10.11).
        #   - Resolve and download project dependencies (from libraryDependencies in build.sbt).
        #   - Compile your Scala source code (from src/main/scala/).
        #   - Use the sbt-assembly plugin to create the fat JAR.
        # The output logs of this step will show the path where the JAR is created,
        # typically at `resource/structured-streaming-mq-assembly-0.1.0-SNAPSHOT.jar`
        # as per your `build.sbt` configuration.
        run: |
          echo "Starting SBT build process..."
          sbt clean assembly
          echo "SBT build process finished. Check logs for JAR creation path."